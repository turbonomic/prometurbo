apiVersion: v1
kind: ConfigMap
metadata:
  name: prometurbo-config-{{ .Release.Name }}
data:
  prometheus.config: |-
    # Prometheus servers and metrics to scrape
    servers:
{{- if .Values.prometheusServers }}
{{ tpl .Values.prometheusServers . | indent 6 }}
{{- end }}
    # A map of exporter configurations to discover entities and related metrics
    exporters:
      istio:
        entities:
          - type: application
            metrics:
              - type: responseTime
                queries:
                  used: 'sum by (instance,destination_service_namespace,destination_service_name,pod_name) (rate(istio_request_duration_milliseconds_sum{request_protocol=~".*",reporter="destination"}[10m])) / sum by (instance,destination_service_namespace,destination_service_name,pod_name) (rate(istio_request_duration_milliseconds_count{}[10m])) >= 0'
              - type: transaction
                queries:
                  used: 'sum by (instance,destination_service_namespace,destination_service_name,pod_name) (rate(istio_requests_total{request_protocol=~".*",reporter="destination"}[10m])) > 0'
            attributes:
              ip:
                label: instance
                matches: \d{1,3}(?:\.\d{1,3}){3}(?::\d{1,5})??
                isIdentifier: true
              namespace:
                label: destination_service_namespace
              service_ns:
                label: destination_service_namespace
              service_name:
                label: destination_service_name
              service:
                label: destination_service_name
      istio-1.4:
        entities:
          - type: application
            metrics:
              - type: responseTime
                queries:
                  used: '1000.0*rate(istio_turbo_pod_latency_time_ms_sum{response_code="200"}[3m])/rate(istio_turbo_pod_latency_time_ms_count{response_code="200"}[3m]) >= 0'
              - type: transaction
                queries:
                  used: 'rate(istio_turbo_pod_request_count{response_code="200"}[3m]) > 0'
            attributes:
              ip:
                label: destination_ip
                isIdentifier: true
              name:
                label: destination_uid
                # Convert from "kubernetes://<podName>.<namespace>" to "<namespace>/<podName>"
                matches: ^kubernetes://(?P<podName>[a-z0-9]([-a-z0-9]*[a-z0-9])?).(?P<namespace>[a-z0-9]([-a-z0-9]*[a-z0-9])?)$
                as: "$namespace/$podName"
              namespace:
                label: destination_svc_ns
              service_ns:
                label: destination_svc_ns
              service_name:
                label: destination_svc_name
              service:
                label: destination_svc_name
              target:
                label: job
      redis:
        entities:
          - type: application
            metrics:
              - type: transaction
                queries:
                  used: 'rate(redis_commands_processed_total[3m])'
            attributes:
              ip:
                label: addr
                # Convert from "ip:host" to "ip"
                matches: \d{1,3}(?:\.\d{1,3}){3}(?::\d{1,5})??
                isIdentifier: true
              target:
                label: job
      cassandra:
        entities:
          - type: application
            metrics:
              - type: responseTime
                queries:
                  used: '0.001*max(cassandra_stats{name=~"org:apache:cassandra:metrics:table:(write|read)latency:99thpercentile"}) by (instance)'
              - type: transaction
                queries:
                  used: 'sum(cassandra_stats{name=~"org:apache:cassandra:metrics:table:(write|read)latency:oneminuterate"}) by (instance)'
            attributes:
              ip:
                label: instance
                matches: \d{1,3}(?:\.\d{1,3}){3}(?::\d{1,5})??
                isIdentifier: true
              target:
                label: job
      webdriver:
        entities:
          - type: application
            hostedOnVM: true
            metrics:
              - type: responseTime
                queries:
                  used: '1000*(navigation_timing_load_event_end_seconds{job="webdriver"}-navigation_timing_start_seconds{job="webdriver"})'
            attributes:
              ip:
                label: instance
                matches: \d{1,3}(?:\.\d{1,3}){3}(?::\d{1,5})??
                isIdentifier: true
              target:
                label: job
      node:
        entities:
          - type: virtualMachine
            metrics:
              - type: cpu
                queries:
                  used: 'sum by (instance, job) (irate(node_cpu_seconds_total{}[3m]))'
              - type: memory
                queries:
                  used: 'node_memory_MemTotal_bytes{} - node_memory_MemAvailable_bytes{}'
            attributes:
              ip:
                label: instance
                matches: \d{1,3}(?:\.\d{1,3}){3}(?::\d{1,5})??
                isIdentifier: true
      jmx-tomcat:
        entities:
          - type: application
            hostedOnVM: true
            metrics:
              - type: cpu
                queries:
                  used: 'java_lang_OperatingSystem_ProcessCpuLoad'
              - type: memory
                queries:
                  used: 'java_lang_Memory_HeapMemoryUsage_used/1024'
                  capacity: 'java_lang_Memory_HeapMemoryUsage_max/1024'
              - type: collectionTime
                queries:
                  used: 'sum without (name) (rate(java_lang_GarbageCollector_CollectionTime)[10m])*100'
              - type: responseTime
                queries:
                  used: 'rate(Catalina_GlobalRequestProcessor_processingTime{name=~".*http-.*"}[3m])'
            attributes:
              ip:
                label: instance
                matches: \d{1,3}(?:\.\d{1,3}){3}(?::\d{1,5})??
                isIdentifier: true
{{- if .Values.extraPrometheusExporters }}
{{ tpl .Values.extraPrometheusExporters . | indent 6 }}
{{- end }}
  businessapp.config: |-
    # This configuration defines business applications and their associated business transactions
    # and dependent services.
    #
    # [Schema]
    # businessApplications: [ businessApplication ]
    # businessApplication:
    #   name: string                   # The name of the business application. Required.
    #   from: string                   # The discovering source (target URL) of the business application. Required.
    #   transactions: [ transaction ]  # A list of business transactions. Optional.
    #   services: [ string ]           # A list of services that the business application depends on. Required.
    # transaction:
    #   name: string                   # The display name of the transaction. Optional.
    #   path: string                   # The request path of a business transaction. Required.
    #   dependOn: [ string ]           # The list of services that the business transaction depends on. Required.
    businessApplications:
{{- if .Values.businessApplications }}
{{ tpl .Values.businessApplications . | indent 6 }}
{{- end }}
